#Now execute commands in below order to let terraform create the resources
mkdir <somedir> && cd <somedir> #create a dir and perform everything inside that directory  

$ terraform --version         # To check the terraform version
$ terraform init              # After variables.tf and provider.tf execute this command to initialize the provider.
$ terraform plan              # After variables.tf, provider.tf, deploy.tf and bootstrap.sh files execute this to check what all resources terraform will create. This will not create
$ terraform apply             # Finally this will create all the resources on your provider (in our case openstack).
$ terraform show              # It will show the metadata about the resources created. Like instance ip and other information.
$ terraform destroy           #Catious, it will delete all the resources created above
$ terraform apply --auto-aprove   ## autoapproves (accept yes option) and executes directly
$ terraform state list        # list of all the resources defined
$ terraform state show <resourcename>    #details of particular defined resource
##for terraform output some value use output resource define the resources as below which takes one value at a time so repeat multiple times
##in the terraform tf resource definition file mention as below
output "server_public_ip" {                 ###name given to this output resource
    value = aws_eip.one.public_ip           ###aws_eip is the resource type one is the name of resource and public is the value of that type of resource###
}
##NOW
$ terraform apply --auto-aprove    # this will print output: server_public_ip = the IP address comming from that resource  

$ terraform destroy -target <resourcetype.resourcename>   ### resourcetype.resourcename can be obtained from terraform state list
## the above command will just delete particular resource from many available resources
$ terraform apply -target <resourcetype.resourcename>    ### same it will just create this resource only and other will remain as it is 

##VARIABLES
#Variables can de defined anywhere in the main terraform file as below
variable "name_of_var" {
      description = "any description"             ##optional
      default     = "some default value of var"   ##optional
      type        = String                        ## optional
 }
 ## In order to use the value of the variable call it with "var.name_of_var"
 ## If no value given and default value not given in that case it will prompt to enter value for the variable during terraform apply, during terraform destroy also but in that case providing the value will be based on relevnce
 
 $ terraform apply -var "name_of_var=value_to_var"   ## to provide value in command line
 
 ##mentioning variables in file default location is terraform.tfvars in the same dir
 vi terraform.tfvars
 name_of_var = "value_of_var"
 
 $ terraform apply
 ## If in case different file not terraform.tfvars then specify the custom.tfvars name during cli
 $ terraform apply -var-file custom.tfvars 
 
 ##Explore use of environment variables in terraform##
